orders = sc.textFile("/public/retail_db/orders")

ordersMap = ordersFiltered. \
map(lambda o:(int(o.split(",")[0]),o.split(",")[1]))

ordersItemsMap = orderItems. \
map(lambda oi: (int(oi.split(",")[1]),(int(oi.split(",")[2]),float(oi.split(",")[4])))) orderItems = sc.textFile("/public/retail_db/order_items")

ordersFiltered = orders. \
filter(lambda o: o.split(",")[3] in ["COMPLETE", "CLOSED"])

ordersMap = ordersFiltered. \
map(lambda o:(int(o.split(",")[0]),o.split(",")[1]))

ordersItemsMap = orderItems. \
map(lambda oi: (int(oi.split(",")[1]),(int(oi.split(",")[2]),float(oi.split(",")[4]))))
ordersJoin = ordersMap.join(ordersItemsMap)
ordersJoinMap = ordersJoin.map(lambda x:( (x[1][0],x[1][1][0]),x[1][1][1]))


from operator import add
dailyRevenuePerProductId = ordersJoinMap.reduceByKey(add)
productsRaw= open("/home/harshal_h/products/part-00000").\
read().splitlines()

products = sc.parallelize(productsRaw)
productsMap = products.map(lambda p :(int(p.split(",")[0]),p.split(",")[2]))
dailyRevenuePerProductIdMap = dailyRevenuePerProductId.map(lambda r:(int(r[0][1]),(r[0][0],r[1])))
dailyRevenuePerProductJoin = dailyRevenuePerProductIdMap.join(productsMap)

